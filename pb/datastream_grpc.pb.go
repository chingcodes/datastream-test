// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataStreamServiceClient is the client API for DataStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataStreamServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (DataStreamService_SubscribeClient, error)
}

type dataStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStreamServiceClient(cc grpc.ClientConnInterface) DataStreamServiceClient {
	return &dataStreamServiceClient{cc}
}

func (c *dataStreamServiceClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (DataStreamService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataStreamService_serviceDesc.Streams[0], "/datastream.DataStreamService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataStreamServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataStreamService_SubscribeClient interface {
	Recv() (*DataPoint, error)
	grpc.ClientStream
}

type dataStreamServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *dataStreamServiceSubscribeClient) Recv() (*DataPoint, error) {
	m := new(DataPoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataStreamServiceServer is the server API for DataStreamService service.
// All implementations must embed UnimplementedDataStreamServiceServer
// for forward compatibility
type DataStreamServiceServer interface {
	Subscribe(*SubscribeReq, DataStreamService_SubscribeServer) error
	mustEmbedUnimplementedDataStreamServiceServer()
}

// UnimplementedDataStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataStreamServiceServer struct {
}

func (*UnimplementedDataStreamServiceServer) Subscribe(*SubscribeReq, DataStreamService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedDataStreamServiceServer) mustEmbedUnimplementedDataStreamServiceServer() {}

func RegisterDataStreamServiceServer(s *grpc.Server, srv DataStreamServiceServer) {
	s.RegisterService(&_DataStreamService_serviceDesc, srv)
}

func _DataStreamService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataStreamServiceServer).Subscribe(m, &dataStreamServiceSubscribeServer{stream})
}

type DataStreamService_SubscribeServer interface {
	Send(*DataPoint) error
	grpc.ServerStream
}

type dataStreamServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *dataStreamServiceSubscribeServer) Send(m *DataPoint) error {
	return x.ServerStream.SendMsg(m)
}

var _DataStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datastream.DataStreamService",
	HandlerType: (*DataStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _DataStreamService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datastream.proto",
}
