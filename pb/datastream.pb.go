// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datastream.proto

package datastream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataPoint struct {
	Time                 float64  `protobuf:"fixed64,1,opt,name=time,proto3" json:"time,omitempty"`
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Name                 string   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Id                   uint64   `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataPoint) Reset()         { *m = DataPoint{} }
func (m *DataPoint) String() string { return proto.CompactTextString(m) }
func (*DataPoint) ProtoMessage()    {}
func (*DataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_6388ae0fb7a2ef90, []int{0}
}

func (m *DataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataPoint.Unmarshal(m, b)
}
func (m *DataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataPoint.Marshal(b, m, deterministic)
}
func (m *DataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPoint.Merge(m, src)
}
func (m *DataPoint) XXX_Size() int {
	return xxx_messageInfo_DataPoint.Size(m)
}
func (m *DataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_DataPoint proto.InternalMessageInfo

func (m *DataPoint) GetTime() float64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DataPoint) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DataPoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataPoint) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SubscribeReq struct {
	Query                string   `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeReq) Reset()         { *m = SubscribeReq{} }
func (m *SubscribeReq) String() string { return proto.CompactTextString(m) }
func (*SubscribeReq) ProtoMessage()    {}
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6388ae0fb7a2ef90, []int{1}
}

func (m *SubscribeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReq.Unmarshal(m, b)
}
func (m *SubscribeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReq.Marshal(b, m, deterministic)
}
func (m *SubscribeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReq.Merge(m, src)
}
func (m *SubscribeReq) XXX_Size() int {
	return xxx_messageInfo_SubscribeReq.Size(m)
}
func (m *SubscribeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReq proto.InternalMessageInfo

func (m *SubscribeReq) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func init() {
	proto.RegisterType((*DataPoint)(nil), "datastream.DataPoint")
	proto.RegisterType((*SubscribeReq)(nil), "datastream.SubscribeReq")
}

func init() {
	proto.RegisterFile("datastream.proto", fileDescriptor_6388ae0fb7a2ef90)
}

var fileDescriptor_6388ae0fb7a2ef90 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x49, 0x2c, 0x49,
	0x2c, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x45, 0x72, 0x71, 0xba, 0x00, 0x79, 0x01, 0xf9, 0x99, 0x79, 0x25, 0x42, 0x42, 0x5c, 0x2c,
	0x25, 0x99, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x8c, 0x41, 0x60, 0xb6, 0x90, 0x08, 0x17,
	0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x13, 0x58, 0x10, 0xc2, 0x01, 0xa9, 0xcc, 0x4b, 0x04,
	0xaa, 0xe4, 0x02, 0x0a, 0x72, 0x06, 0x81, 0xd9, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0xdc,
	0x40, 0x11, 0x96, 0x20, 0x20, 0x4b, 0x49, 0x85, 0x8b, 0x27, 0xb8, 0x34, 0xa9, 0x38, 0xb9, 0x28,
	0x33, 0x29, 0x35, 0x28, 0xb5, 0x10, 0x64, 0x52, 0x60, 0x69, 0x6a, 0x51, 0x25, 0xd8, 0x78, 0xce,
	0x20, 0x08, 0xc7, 0x28, 0x94, 0x4b, 0x10, 0xe4, 0x80, 0x60, 0xb0, 0x73, 0x82, 0x53, 0x8b, 0xca,
	0x32, 0x93, 0x53, 0x85, 0x1c, 0xb8, 0x38, 0xe1, 0x5a, 0x85, 0x24, 0xf4, 0x90, 0x7c, 0x80, 0x6c,
	0xa2, 0x94, 0x28, 0xb2, 0x0c, 0xdc, 0x1b, 0x4a, 0x0c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0xaf, 0x1a,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x91, 0x6c, 0xb5, 0x64, 0xfe, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataStreamServiceClient is the client API for DataStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataStreamServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (DataStreamService_SubscribeClient, error)
}

type dataStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStreamServiceClient(cc grpc.ClientConnInterface) DataStreamServiceClient {
	return &dataStreamServiceClient{cc}
}

func (c *dataStreamServiceClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (DataStreamService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataStreamService_serviceDesc.Streams[0], "/datastream.DataStreamService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataStreamServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataStreamService_SubscribeClient interface {
	Recv() (*DataPoint, error)
	grpc.ClientStream
}

type dataStreamServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *dataStreamServiceSubscribeClient) Recv() (*DataPoint, error) {
	m := new(DataPoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataStreamServiceServer is the server API for DataStreamService service.
type DataStreamServiceServer interface {
	Subscribe(*SubscribeReq, DataStreamService_SubscribeServer) error
}

// UnimplementedDataStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataStreamServiceServer struct {
}

func (*UnimplementedDataStreamServiceServer) Subscribe(req *SubscribeReq, srv DataStreamService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterDataStreamServiceServer(s *grpc.Server, srv DataStreamServiceServer) {
	s.RegisterService(&_DataStreamService_serviceDesc, srv)
}

func _DataStreamService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataStreamServiceServer).Subscribe(m, &dataStreamServiceSubscribeServer{stream})
}

type DataStreamService_SubscribeServer interface {
	Send(*DataPoint) error
	grpc.ServerStream
}

type dataStreamServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *dataStreamServiceSubscribeServer) Send(m *DataPoint) error {
	return x.ServerStream.SendMsg(m)
}

var _DataStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datastream.DataStreamService",
	HandlerType: (*DataStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _DataStreamService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datastream.proto",
}
